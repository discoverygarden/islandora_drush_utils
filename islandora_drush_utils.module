<?php

/**
 * @file
 * General hook implementations.
 */

/**
 * Implements hook_batch_alter().
 */
function islandora_drush_utils_batch_alter(array &$batch) : void {
  // Better preservation messsaging.
  foreach ($batch['sets'] as &$set) {
    if (!isset($set['operations'])) {
      continue;
    }
    foreach ($set['operations'] as $operation_structure) {
      $operation = reset($operation_structure);
      // This can be either an array, or a string like
      // '\Drupal\migrate_tools\MigrateBatchExecutable::batchProcessImport'.
      if (is_array($operation)) {
        $operator = reset($operation);
      }
      else {
        $operator = $operation;
      }
      // @XXX: this is the most identifying part of this batch.
      // XXX: Spell out the classname to avoid creating a strong dependency on
      // "content_sync_helper".
      if (is_a($operator, "\Drupal\content_sync_helper\Utility\Exporter")) {
        $set['title'] = t('Updating the repository');
      }
    }
  }

  // XXX: Batches performed under Drush 9 do not inherit the user of the
  // caller, and Drush 9's "process.manager" service is not easily
  // overridable so as to be able to override... SO: Let's wrap all batch
  // operations passing through the CLI if they have been submitted as an
  // authenticated user, to make them run as said authenticated user.
  // Somewhat associated with Drush 9's whole dropping-support-for-the-"--user"
  // -argument business...
  // @see https://github.com/drush-ops/drush/issues/3396
  if (PHP_SAPI !== 'cli') {
    return;
  }

  $logger = \Drupal::logger('islandora_drush_utils');
  $user = \Drupal::currentUser();
  if (!$user->isAuthenticated()) {
    $logger->debug('Non-authenticated batch; skipping @wrapper wrapping...', [
      '@wrapper' => '_islandora_drush_utils_user_wrapped_batch_op',
    ]);
    return;
  }

  $namer = function ($callable) {
    // Adapted from https://stackoverflow.com/a/42954492
    if (is_string($callable)) {
      return trim($callable);
    }

    if (is_array($callable)) {
      if (is_object($callable[0])) {
        return sprintf("(%s instance)::%s", get_class($callable[0]),
          trim($callable[1]));
      }

      return sprintf("%s::%s", trim($callable[0]), trim($callable[1]));
    }

    if ($callable instanceof Closure) {
      return 'closure';
    }

    return 'unknown';
  };

  $wrap_op = static function ($op) use ($user, $logger, $namer) {
    $func = reset($op);
    if ($func !== '_islandora_drush_utils_user_wrapped_batch_op') {
      $logger->debug('Wrapping @func with @wrapper to maintain the user (@uid).',
        [
          '@func' => $namer($func),
          '@wrapper' => '_islandora_drush_utils_user_wrapped_batch_op',
          '@uid' => $user->id(),
        ]);
      return [
        '_islandora_drush_utils_user_wrapped_batch_op',
        [
          $user->id(),
          $op,
        ],
      ];
    }

    return $op;
  };

  foreach ($batch['sets'] as &$set) {
    $set['operations'] = array_map($wrap_op, $set['operations']);
  }
  // XXX: Clean up the reference.
  unset($set);
}

/**
 * Wrap batch op with user.
 */
function _islandora_drush_utils_user_wrapped_batch_op(int|string $id, array $info, array &$context) {
  $switcher = \Drupal::service('account_switcher');
  try {
    $user = \Drupal::service('entity_type.manager')
      ->getStorage('user')
      ->load($id);
    $switcher->switchTo($user);

    [$op, $args] = $info;
    return call_user_func_array($op, array_merge($args, [&$context]));
  } finally {
    $switcher->switchBack();
  }
}
